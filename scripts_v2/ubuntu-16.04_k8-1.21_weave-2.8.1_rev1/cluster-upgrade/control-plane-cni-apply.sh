#!/usr/bin/env bash

set -e

weave_version=2.8.1
versioned_weave_file="/root/weave_v$(echo $weave_version | sed -r 's/\./\-/g').yml"

touch $versioned_weave_file
export weave_yaml_content_b64=""
echo $weave_yaml_content_b64 | base64 -d > $versioned_weave_file

kubectl apply -f $versioned_weave_file
systemctl restart kubelet
while [ `systemctl is-active kubelet` != 'active' ]; do echo 'waiting for kubelet'; sleep 5; done
